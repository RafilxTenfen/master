}
randData
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
randData
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
randData
dput
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
dput(randData)
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
dput(randData)
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
dput(randData)
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 34
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
dput(randData)
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
randData
write.table(df, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
df <- data.frame(randData)
write.table(df, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
source("rand171.R")         # carrega arquivo que contem a funcao
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 34
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
df <- data.frame(randData)
write.table(df, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
# generate 5 initial executions
for (i in 1:5) {
randData <- c(randData, rand171(noc3to5s))
}
df <- data.frame(randData)
write.table(df, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
initialExec <- 5
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
initialExec <- 5
# generate 5 initial executions
for (i in 1:initialExec) {
randData <- c(randData, rand171(noc3to5s))
}
df <- data.frame(randData)
write.table(df, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 34
initialExec <- 5
# generate 5 initial executions
for (i in 1:initialExec) {
randData <- c(randData, rand171(noc3to5s))
}
df <- data.frame(randData)
write.table(df, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
for (i in 1:1) {
randData
}
for (i in 1:1) {
randData
}
for (i in 1:1) {
dput(randData)
}
for (i in 1:0) {
dput(randData)
}
for (i in 1:-1) {
dput(randData)
}
for (i in 1:2) {
dput(randData)
}
for (i in 1:1) {
dput(randData)
}
# código para analisar os dados da questão 2 aqui
randDataN <- randData
for (i in 1:(nestCeil - initialExec)) {
randDataN <- c(randDataN, rand171(noc3to5s))
}
randDataN
length(randDataN)
dfN <- data.frame(randDataN)
write.table(dfN, "randDataN-rand171.dat", row.names = FALSE, quote = FALSE)
dfn
dfN
t.test(randDataN, conf.level=0.95)
randDataN.ic <- t.test(randDataN, conf.level=0.95)
randDataN.ic
randDataN.ic <- t.test(randDataN, conf.level=0.95)
randDataN.ic
z <- qnorm(p)
qnorm(p)
qt(p, initialExec - 1)
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (initialExec < 30) {
z <- qt(p, initialExec - 1)
}
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (initialExec < 30) {
z <- qt(p, initialExec - 1)
}
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para analisar os dados da questão 3 aqui
xbar <- mean(randDataN)
s <- sd(randDataN)
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (length(randDataN) < 30) {
z <- qt(p, length(randDataN) - 1)
}
(z * s) / (xbar * sqrt(length(randDataN)))
#nest <- (z*s/(e*xbar))^2
#nestCeil <- ceiling(nest)
#nestCeil
xbar <- mean(randDataN)
s <- sd(randDataN)
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (length(randDataN) < 30) {
z <- qt(p, length(randDataN) - 1)
}
(z * s) / (xbar * sqrt(length(randDataN)))
e = (z * s) / (xbar * sqrt(length(randDataN)))
e * 100
e = ((z * s) / (xbar * sqrt(length(randDataN)))) * 100
e
# código para analisar os dados da questão 3 aqui
xbar <- mean(randDataN)
s <- sd(randDataN)
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (length(randDataN) < 30) {
z <- qt(p, length(randDataN) - 1)
}
e = ((z * s) / (xbar * sqrt(length(randDataN)))) * 100
while (e > 6) {
randDataN <- c(randDataN, rand171(noc3to5s))
xbar <- mean(randDataN)
s <- sd(randDataN)
z <- qnorm(p)
if (length(randDataN) < 30) {
z <- qt(p, length(randDataN) - 1)
}
e = ((z * s) / (xbar * sqrt(length(randDataN)))) * 100
}
# código para analisar os dados da questão 3 aqui
xbar <- mean(randDataN)
s <- sd(randDataN)
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (length(randDataN) < 30) {
z <- qt(p, length(randDataN) - 1)
}
e = ((z * s) / (xbar * sqrt(length(randDataN)))) * 100
e
while (e > 6) {
randDataN <- c(randDataN, rand171(noc3to5s))
xbar <- mean(randDataN)
s <- sd(randDataN)
z <- qnorm(p)
if (length(randDataN) < 30) {
z <- qt(p, length(randDataN) - 1)
}
e = ((z * s) / (xbar * sqrt(length(randDataN)))) * 100
e
}
#nest <- (z*s/(e*xbar))^2
#nestCeil <- ceiling(nest)
#nestCeil
e
randDataN
length(randDataN)
# código para analisar os dados da questão 3 aqui
randDataErrorMargin <- randDataN
xbar <- mean(randDataErrorMargin)
s <- sd(randDataErrorMargin)
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (length(randDataErrorMargin) < 30) {
z <- qt(p, length(randDataErrorMargin) - 1)
}
e = ((z * s) / (xbar * sqrt(length(randDataErrorMargin)))) * 100
e
while (e > 6) {
randDataErrorMargin <- c(randDataErrorMargin, rand171(noc3to5s))
xbar <- mean(randDataErrorMargin)
s <- sd(randDataErrorMargin)
z <- qnorm(p)
if (length(randDataErrorMargin) < 30) {
z <- qt(p, length(randDataErrorMargin) - 1)
}
e = ((z * s) / (xbar * sqrt(length(randDataErrorMargin)))) * 100
e
}
#nest <- (z*s/(e*xbar))^2
#nestCeil <- ceiling(nest)
#nestCeil
e
length(randDataErrorMargin)
randDataErrorMargin.ic <- t.test(randDataErrorMargin, conf.level=0.95)
randDataErrorMargin
randDataErrorMargin.ic <- t.test(randDataErrorMargin, conf.level=0.95)
randDataErrorMargin.ic
dput(randDataErrorMargin)
dfN <- data.frame(randDataErrorMargin)
write.table(dfN, "randDataErrorMargin-rand171.dat", row.names = FALSE, quote = FALSE)
# código para analisar os dados da questão 4 aqui
q1 <- read.table("randData5-rand171.dat", header = TRUE)$randData5
q1
q2 <- read.table("randDataN-rand171.dat", header = TRUE)$randDataN
q2
q3 <- read.table("randDataErrorMargin-rand171.dat", header = TRUE)$randDataErrorMargin
q3
q3
# código para analisar os dados da questão 4 aqui
q1 <- read.table("randData5-rand171.dat", header = TRUE)$randData
q1
q2 <- read.table("randDataN-rand171.dat", header = TRUE)$randDataN
q2
q3 <- read.table("randDataErrorMargin-rand171.dat", header = TRUE)$randDataErrorMargin
q3
length(q3)
27 - 13
hist(q1)
randDataN.ic <- t.test(randDataN, conf.level=0.95)
randDataN.ic
randDataN.ic <- t.test(randDataN, conf.level=0.95)
randDataN.ic
randDataN.ic <- t.test(randDataN, conf.level=0.95)
randDataN.ic
str(randDataN.ic)
randDataN.ic$conf.int
str(randDataN.ic)
randDataN.ic
randDataN.ic$conf.int
randDataN.ic <- t.test(randDataN, conf.level=0.95)
randDataN.ic
str(randDataN.ic)
randDataN.ic$conf.int
hist(q1, col = "GREEN", breaks=5)
hist(q1, col = "GREEN", breaks=10)
hist(q1, col = "GREEN", breaks=5)
hist(q1, col = "GREEN", breaks=15)
hist(q1, col = "GREEN", breaks=5)
hist(q1, col = "GREEN", breaks=2)
hist(q1, col = "GREEN", breaks=5)
hist(q2, col = "BLUE", breaks=5)
hist(q3, col = "BLUE", breaks=5)
hist(q3, col = "BLUE", breaks=15)
hist(q3, col = "BLUE", breaks=30)
hist(q3, col = "BLUE", breaks=50)
hist(q3, col = "BLUE", breaks=120)
hist(q2, col = "BLUE", breaks=5)
hist(q2, col = "BLUE", breaks=15)
hist(q2, col = "BLUE", breaks=20)
hist(q2, col = "BLUE", breaks=15)
hist(q1, col = "GREEN", breaks=5)
hist(q2, col = "BLUE", breaks=15)
hist(q3, col = "RED", breaks=120)
hist(q3, col = "RED", breaks=3)
hist(q3, col = "RED", breaks=1)
hist(q3, col = "RED", breaks=5)
hist(q3, col = "RED", breaks=7)
hist(q3, col = "RED", breaks=10)
hist(q3, col = "RED", breaks=13)
hist(q3, col = "RED", breaks=15)
hist(q3, col = "RED", breaks=15)
hist(q3, col = "RED", breaks=30)
hist(q3, col = "RED", breaks=50)
hist(q3, col = "RED", breaks=80)
hist(q3, col = "RED", breaks=15)
hist(q3, col = "RED", breaks=5)
hist(q1, col = "GREEN", breaks=5)
hist(q1, col = "GREEN", breaks=5)
hist(q1, col = "GREEN", breaks=5)
# código para buscar os dados da questão 4 aqui
q1 <- read.table("randData5-rand171.dat", header = TRUE)$randData
q1
q2 <- read.table("randDataN-rand171.dat", header = TRUE)$randDataN
q2
q3 <- read.table("randDataErrorMargin-rand171.dat", header = TRUE)$randDataErrorMargin
q3
hist(q1, col = "GREEN", breaks=5)
hist(q2, col = "BLUE", breaks=15)
hist(q3, col = "RED", breaks=5)
hist(q3, col = "RED", breaks=80)
# código para buscar os dados da questão 4 aqui
q1 <- read.table("randData5-rand171.dat", header = TRUE)$randData
q1
q2 <- read.table("randDataN-rand171.dat", header = TRUE)$randDataN
q2
q3 <- read.table("randDataErrorMargin-rand171.dat", header = TRUE)$randDataErrorMargin
q3
hist(q1, col = "GREEN", breaks=5)
hist(q2, col = "BLUE", breaks=5)
hist(q2, col = "BLUE", breaks=15)
hist(q2, col = "BLUE", breaks=30)
hist(q2, col = "BLUE", breaks=50)
hist(q2, col = "BLUE", breaks=75)
hist(q3, col = "RED", breaks=5)
hist(q3, col = "RED", breaks=80)
# código para buscar os dados da questão 4 aqui
q1 <- read.table("randData5-rand171.dat", header = TRUE)$randData
q1
q2 <- read.table("randDataN-rand171.dat", header = TRUE)$randDataN
q2
q3 <- read.table("randDataErrorMargin-rand171.dat", header = TRUE)$randDataErrorMargin
q3
hist(q1, col = "GREEN", breaks=5)
hist(q2, col = "BLUE", breaks=5)
hist(q2, col = "BLUE", breaks=15)
hist(q2, col = "BLUE", breaks=30)
hist(q2, col = "BLUE", breaks=50)
hist(q2, col = "BLUE", breaks=75)
hist(q3, col = "RED", breaks=5)
hist(q3, col = "RED", breaks=15)
hist(q3, col = "RED", breaks=30)
hist(q3, col = "RED", breaks=50)
hist(q3, col = "RED", breaks=75)
plot(ecdf(q3))
boxplot(q3)
boxplot(q3, horizontal = TRUE)
- Histograma da questão 1 não é possível concluir quase nada sobre ele pela falta de amostras
`r hist(q1, col = "GREEN", breaks=5)`
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 34
initialExec <- 5
# generate 5 initial executions
for (i in 1:initialExec) {
randData <- c(randData, rand171(noc3to5s))
}
df5 <- data.frame(randData)
write.table(df5, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 33
initialExec <- 5
# generate 5 initial executions
for (i in 1:initialExec) {
randData <- c(randData, rand171(noc3to5s))
}
df5 <- data.frame(randData)
write.table(df5, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
# código para analisar os dados da questão 1 aqui
xbar <- mean(randData)
s <- sd(randData)
e <- 0.06
ic <- 0.95
alfa <- 1 - ic
p <- 1 - alfa/2
z <- qnorm(p)
if (initialExec < 30) {
z <- qt(p, initialExec - 1)
}
nest <- (z*s/(e*xbar))^2
nestCeil <- ceiling(nest)
nestCeil
# código para recuperar os tempos de execução mensurados aqui
randData <- c()
noc3to5s <- 32
initialExec <- 5
# generate 5 initial executions
for (i in 1:initialExec) {
randData <- c(randData, rand171(noc3to5s))
}
df5 <- data.frame(randData)
write.table(df5, "randData5-rand171.dat", row.names = FALSE, quote = FALSE)
dput(randData)
