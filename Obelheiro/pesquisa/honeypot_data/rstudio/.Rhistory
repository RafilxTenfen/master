query_id_frequency['year_period'] = data_split_year_period[[i]]$year_period[1]
period_query_id = rbind(period_query_id, head(query_id_frequency[order(-query_id_frequency$n),], N) )
}
period_query_id %>%
group_split(year_period)
period_query_id %>%
count(query_id) %>%
arrange(desc(n)) %>%
filter(n > 1)
period_query_id_qname = data.frame()
for (i in c(1:length(data_split_year_period))) {
query_id_qname_frequency = data_split_year_period[[i]] %>%
count(qname, qtype, query_id, year_period, sort = TRUE) %>%
filter(n > 1)
period_query_id_qname = rbind(period_query_id_qname, head(query_id_qname_frequency, N) )
}
period_query_id_qname %>%
group_split(year_period)
top_queryid_qname = period_query_id_qname %>%
count(query_id, qtype, qname) %>%
arrange(desc(n)) %>%
filter(n > 1)
top_queryid_qname
data['tempo_final']
data['tempo_final_cast'] = as.POSIXct(data[['tempo_final']], format = "%Y-%m-%d %H:%M:%S")
data['tempo_final_date'] = date(data[['tempo_final_cast']])
data['tempo_final_hour'] = hour(data[['tempo_final_cast']])
data
data[['tempo_final_cast']]$day
top_overlap = data_overlap %>%
filter(query_id %in% top_repeated_query_id[['query_id']]) %>%
filter(qname %in% top_repeated_qname[['qname']]) %>%
arrange(tempo_final_cast) %>%
select('query_id', 'qtype', 'qname', 'tempo_final_date', 'tempo_final_hour')
top_overlap
library('RSQLite')
library('ggplot2')
library(DBI)
options("scipen"=100, "digits"=4)
library(dplyr)
library(tibble)
library(viridis)
library(lubridate)
db <- dbConnect(RSQLite::SQLite(), dbname="./dnstor_statistics_dns.sqlite")
data_unfetch <-dbSendQuery(db, "
SELECT *, CAST(CAST(year AS text) || CAST(period AS text) as integer) as year_period
FROM DNS_ANALYSIS
JOIN DNS_ANALYSIS_QUESTION
ON DNS_ANALYSIS.id = DNS_ANALYSIS_QUESTION.dns_analysis_id
WHERE QTYPE != 0
")
data <- fetch(data_unfetch)
dbDisconnect(db)
data_split_year_period = data %>%
group_split(year_period)
N=10
period_query_id = data.frame()
for (i in c(1:length(data_split_year_period))) {
query_id_frequency = data_split_year_period[[i]] %>%
count(query_id)
query_id_frequency['year_period'] = data_split_year_period[[i]]$year_period[1]
period_query_id = rbind(period_query_id, head(query_id_frequency[order(-query_id_frequency$n),], N) )
}
period_query_id %>%
group_split(year_period)
period_query_id %>%
count(query_id) %>%
arrange(desc(n)) %>%
filter(n > 1)
period_query_id_qname = data.frame()
for (i in c(1:length(data_split_year_period))) {
query_id_qname_frequency = data_split_year_period[[i]] %>%
count(qname, qtype, query_id, year_period, sort = TRUE) %>%
filter(n > 1)
period_query_id_qname = rbind(period_query_id_qname, head(query_id_qname_frequency, N) )
}
period_query_id_qname %>%
group_split(year_period)
top_queryid_qname = period_query_id_qname %>%
count(query_id, qtype, qname) %>%
arrange(desc(n)) %>%
filter(n > 1)
top_queryid_qname
data['tempo_final']
data['tempo_final_cast'] = as.POSIXct(data[['tempo_final']], format = "%Y-%m-%d %H:%M:%S")
data['tempo_final_date'] = date(data[['tempo_final_cast']])
data['tempo_final_hour'] = hour(data[['tempo_final_cast']])
data_overlap = select(data, 'query_id', 'qtype', 'qname', 'year_period', 'requests_per_attack', 'tempo_final_cast', 'tempo_final_date', 'tempo_final_hour')
top_repeated_query_id = top_queryid_qname %>%
count(query_id) %>%
filter(n > 1) %>%
select('query_id')
top_repeated_qname = top_queryid_qname %>%
filter(query_id %in% top_repeated_query_id[['query_id']]) %>%
select('qname')
data_overlap_split_qname = data_overlap %>%
filter(query_id %in% top_repeated_query_id[['query_id']]) %>%
filter(qname %in% top_repeated_qname[['qname']]) %>%
arrange(tempo_final_cast) %>%
count(query_id, qname, tempo_final_date, tempo_final_hour) %>%
group_split(qname)
top_overlap = data_overlap %>%
filter(query_id %in% top_repeated_query_id[['query_id']]) %>%
filter(qname %in% top_repeated_qname[['qname']]) %>%
arrange(tempo_final_cast) %>%
select('query_id', 'qtype', 'qname', 'tempo_final_date', 'tempo_final_hour')
top_overlap
#all_equal(data_overlap_split_qname[[1]], data_overlap_split_qname[[2]], )
#duplicated(top_overlap, incomparables = TRUE)
#top_overlap[duplicated(top_overlap, incomparables = TRUE),]
#all.equal(select(data_overlap_split_qname[[1]], 'query_id', 'tempo_final_date', 'tempo_final_hour', 'qname'), select(data_overlap_split_qname[[2]], 'query_id', 'tempo_final_date', 'tempo_final_hour', 'qname'), convert=TRUE)
#merge(select(data_overlap_split_qname[[1]], 'query_id', 'tempo_final_date', 'tempo_final_hour', 'qname'), select(data_overlap_split_qname[[2]], 'query_id', 'tempo_final_date', 'tempo_final_hour', 'qname'), by=c("query_id", "tempo_final_date", "tempo_final_hour"))
#data_overlap_split_qname[[1]] %>%
# anti_join(data_overlap_split_qname[[2]], by="qname")
#data_overlap_split_qname[[2]] %>%
# distinct(tempo_final_date)
#distinct(data_overlap_split_qname[[1]][['tempo_final_date']])
#semi_join(data_overlap_split_qname[[1]], data_overlap_split_qname[[2]], by=c("tempo_final_date", "tempo_final_hour", "query_id"))
#top_queryid_qname %>%
#filter(query_id )
# top_queryid_qname[['query_id']]
head(top_overlap, N)
top_queryid_qname
data_overlap
top_overlap
data_overlap %>%
filter(query_id %in% top_repeated_query_id[['query_id']]) %>%
filter(qname %in% top_repeated_qname[['qname']]) %>%
arrange(tempo_final_cast) %>%
count(query_id, qname, tempo_final_date, tempo_final_hour)
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot( aes(x=year_period, y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", width = 0.5) +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), position = position_stack(vjust = 0.1)) +
scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("All QTYPES - stacked bars")
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot( aes(x=year_period, y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", width = 0.5) +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), position = position_stack(vjust = 0.1)) +
#scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("All QTYPES - stacked bars")
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot( aes(x=year_period, y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", width = 0.5) +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), position = position_stack(vjust = 0.1)) +
#scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("All QTYPES - stacked bars")
library('RSQLite')
library('ggplot2')
library(DBI)
options("scipen"=100, "digits"=4)
library(dplyr)
library(tibble)
library(viridis)
library(lubridate)
db <- dbConnect(RSQLite::SQLite(), dbname="./dnstor_statistics_dns.sqlite")
data_unfetch <-dbSendQuery(db, "
SELECT *, CAST(CAST(year AS text) || CAST(period AS text) as integer) as year_period
FROM DNS_ANALYSIS
JOIN DNS_ANALYSIS_QUESTION
ON DNS_ANALYSIS.id = DNS_ANALYSIS_QUESTION.dns_analysis_id
WHERE QTYPE != 0
")
data <- fetch(data_unfetch)
dns_data_unfetch <- dbSendQuery(db, "
SELECT count(*) as countGrouped, year, period, CAST(CAST(year AS text) || CAST(period AS text) as integer) as year_period , qname, qtype, SUM(requests_per_attack) as quantity
FROM DNS_ANALYSIS
JOIN DNS_ANALYSIS_QUESTION
ON DNS_ANALYSIS.id = DNS_ANALYSIS_QUESTION.dns_analysis_id
WHERE QTYPE != 0
GROUP BY year_period, year, period, qname, qtype
ORDER BY quantity DESC;
")
dns_data_fetched <- fetch(dns_data_unfetch)
dns_data_overlap_unfetch <- dbSendQuery(db, "
SELECT *
FROM TB_DATE_OVERLAP_QUERYID
ORDER BY amount_overlap;
")
dns_data_overlap_fetched <- fetch(dns_data_overlap_unfetch)
dbDisconnect(db)
data_split_year_period = data %>%
group_split(year_period)
N=10
period_query_id = data.frame()
for (i in c(1:length(data_split_year_period))) {
query_id_frequency = data_split_year_period[[i]] %>%
count(query_id)
query_id_frequency['year_period'] = data_split_year_period[[i]]$year_period[1]
period_query_id = rbind(period_query_id, head(query_id_frequency[order(-query_id_frequency$n),], N) )
}
period_query_id %>%
group_split(year_period)
period_query_id %>%
arrange(desc(n)) %>%
head(N)
period_query_id %>%
count(query_id) %>%
arrange(desc(n)) %>%
filter(n > 1)
period_query_id_qname = data.frame()
for (i in c(1:length(data_split_year_period))) {
query_id_qname_frequency = data_split_year_period[[i]] %>%
count(qname, qtype, query_id, year_period, sort = TRUE) %>%
filter(n > 1)
period_query_id_qname = rbind(period_query_id_qname, head(query_id_qname_frequency, N) )
}
period_query_id_qname %>%
group_split(year_period)
top_queryid_qname = period_query_id_qname %>%
count(query_id, qtype, qname) %>%
arrange(desc(n)) %>%
filter(n > 1)
top_queryid_qname
dns_data.year_period.ungrouped <- group_split(dns_data_fetched, year_period)
dns_data.topNconsultas <- head(dns_data.year_period.ungrouped[[1]], N)
dns_data.year_period.ungrouped.len = length(dns_data.year_period.ungrouped)
dns_columns = c('year_period', 'qtype', 'quantity', 'qname')
select(dns_data.topNconsultas, dns_columns)
select(head(dns_data.year_period.ungrouped[[2]], N), dns_columns)
select(head(dns_data.year_period.ungrouped[[3]], N), dns_columns)
select(head(dns_data.year_period.ungrouped[[4]], N), dns_columns)
select(head(dns_data.year_period.ungrouped[[5]], N), dns_columns)
select(head(dns_data.year_period.ungrouped[[6]], N), dns_columns)
for (i in c(2:dns_data.year_period.ungrouped.len)) {
dns_data.topNconsultas <- rbind(dns_data.topNconsultas, head(dns_data.year_period.ungrouped[[i]], N))
}
## ------------ Quantos ataques com cada tipo de qtype foi utilizado, por trimestre ? ------------
#dns_data_fetched
dns_data_fetched.quarter_type_quantity = select(dns_data_fetched, c('year_period', 'qtype', 'quantity'))
dns_data_fetched.sum_attacks_quarterly = dns_data_fetched.quarter_type_quantity %>%
group_by(qtype, year_period) %>%
summarise(quantity = sum(quantity))
#dns_data_fetched.sum_attacks_quarterly %>%
#  mutate(year_period=as.factor(year_period)) %>%
#  ggplot(aes(x = year_period, y = quantity, color = qtype)) +
#  geom_line()
#ggplot(data = dns_data_fetched.sum_attacks_quarterly, aes(x = year_period, y = quantity)) +
#    geom_line() +
#    facet_wrap(facets = vars(qtype))
#dns_data_fetched.sum_attacks_quarterly %>%
#  filter(qtype != "ANY") %>%
#  ggplot(aes(x = year_period, y = quantity)) +
#    geom_line() +
#   facet_wrap(facets = vars(qtype))
# ------------------------------------------- quantity with percentage
dns_data_fetched.sum_attacks_quarterly.sum_period_quantity = dns_data_fetched.sum_attacks_quarterly %>%
group_by(year_period) %>%
summarise(sum_period_quantity = sum(quantity), qtype=qtype, quantity=quantity)
dns_data_fetched.sum_attacks_quarterly.sum_period_quantity['quantity_percentage'] = (dns_data_fetched.sum_attacks_quarterly.sum_period_quantity$quantity * 100) / dns_data_fetched.sum_attacks_quarterly.sum_period_quantity$sum_period_quantity
#dns_data_fetched.sum_attacks_quarterly.sum_period_quantity %>%
#  filter(quantity_percentage > 0.001) %>%
#  filter(quantity_percentage > 0.1) %>%
#ggplot(aes(x = year_period, y = quantity_percentage)) +
# geom_line() +
#facet_wrap(facets = vars(qtype))
#dns_data_fetched.sum_attacks_quarterly.sum_period_quantity %>%
#  filter(qtype != "ANY") %>%
#  ggplot(aes(x = year_period, y = quantity_percentage)) +
#    geom_line() +
#    facet_wrap(facets = vars(qtype))
#dns_data_fetched.sum_attacks_quarterly.sum_period_quantity %>%
#mutate(year_period=as.factor(year_period)) %>%
#  filter(quantity_percentage > 0.1) %>%
#  ggplot(aes(x = year_period, y = quantity_percentage, color = qtype)) +
#  geom_line()
# ------------------------------------------- filter any
dns_data_fetched.sum_attacks_quarterly.sum_period_quantity.filter_any = dns_data_fetched.sum_attacks_quarterly %>%
group_by(year_period) %>%
filter(qtype != "ANY") %>%
summarise(sum_period_quantity = sum(quantity), qtype=qtype, quantity=quantity)
dns_data_fetched.sum_attacks_quarterly.sum_period_quantity.filter_any['quantity_percentage'] = (dns_data_fetched.sum_attacks_quarterly.sum_period_quantity.filter_any$quantity * 100) / dns_data_fetched.sum_attacks_quarterly.sum_period_quantity.filter_any$sum_period_quantity
#dns_data_fetched.sum_attacks_quarterly.sum_period_quantity.filter_any %>%
#  ggplot(aes(x = year_period, y = quantity_percentage)) +
#    geom_line() +
#    facet_wrap(facets = vars(qtype))
dns_data_fetched.sum_attacks_quarterly.sum_period_quantity %>%
ggplot(aes(x = year_period, y = quantity_percentage)) +
geom_line() +
facet_wrap(facets = vars(qtype))
dns_data_fetched.sum_attacks_quarterly.sum_period_quantity %>%
#mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot(aes(x = year_period, y = quantity_percentage, color = qtype)) +
geom_line()
# ------------ Quantos qtypes novos aprecem em cada trimestre ------------
# > Diferenças percentuais são mais relevantes que absolutas
quarter_qtype_aux = dns_data.year_period.ungrouped[[1]] %>%
group_by(qtype) %>%
summarise(quantity = sum(quantity))
#quarter_qtype_2 = dns_data.year_period.ungrouped[[2]] %>%
#  group_by(qtype) %>%
#  summarise(quantity = sum(quantity))
#quarter_qtype_2
#merged = merge(x = quarter_qtype_aux, y = quarter_qtype_2, by = "qtype", all = TRUE)
#merged.new_quantity = merged$quantity.x - merged$quantity.y
#merged
quarter_new_qtype = data.frame()
for (i in c(2:dns_data.year_period.ungrouped.len)) {
quarter_qtype = dns_data.year_period.ungrouped[[i]] %>%
group_by(qtype) %>%
summarise(quantity = sum(quantity))
merged = merge(x = quarter_qtype_aux, y = quarter_qtype, by = "qtype", all = TRUE)
merged.new_quantity = merged$quantity.x - merged$quantity.y
perio_to_period = paste(head(dns_data.year_period.ungrouped[[i - 1]]['year'], 1), '.',  head(dns_data.year_period.ungrouped[[i - 1]]['period'], 1), '->' , head(dns_data.year_period.ungrouped[[i]]['year'], 1), '.', head(dns_data.year_period.ungrouped[[i]]['period'], 1))
quarter_new_qtype <- rbind(quarter_new_qtype, data.frame(quarter_to_quarter=perio_to_period, merged$qtype, sum_quantity=merged$quantity.y - merged$quantity.x, quantity_percentage=(((merged$quantity.y - merged$quantity.x)*100)/merged$quantity.x), merged$quantity.x, merged$quantity.y))
quarter_qtype_aux = quarter_qtype
}
#quarter_new_qtype
#head(na.omit(quarter_new_qtype[order(-quarter_new_qtype$quantity_percentage),]))
# ------------ Quantos qname novos aprecem em cada trimestre ------------
quarter_qname_aux = dns_data.year_period.ungrouped[[1]] %>%
group_by(qname) %>%
summarise(quantity = sum(quantity))
quarter_new_qname = data.frame()
for (i in c(2:dns_data.year_period.ungrouped.len)) {
quarter_qname = dns_data.year_period.ungrouped[[i]] %>%
group_by(qname) %>%
summarise(quantity = sum(quantity))
merged = merge(x = quarter_qname_aux, y = quarter_qname, by = "qname", all = TRUE)
merged.new_quantity = merged$quantity.x - merged$quantity.y
period_to_period = paste(head(dns_data.year_period.ungrouped[[i - 1]]['year'], 1), '.',  head(dns_data.year_period.ungrouped[[i - 1]]['period'], 1), '->' , ... = head(dns_data.year_period.ungrouped[[i]]['year'], 1), '.', head(dns_data.year_period.ungrouped[[i]]['period'], 1))
quarter_new_qname <- rbind(quarter_new_qname, data.frame(quarter_to_quarter=period_to_period, merged$qname, sum_quantity=(merged$quantity.y - merged$quantity.x), quantity_percentage_diff=(((merged$quantity.y - merged$quantity.x)*100)/merged$quantity.x), merged$quantity.x, merged$quantity.y))
quarter_qname_aux = quarter_qname
}
#quarter_new_qname
#head(na.omit(quarter_new_qname[-order(quarter_new_qname$quantity_percentage_diff),]))
quarter_new_qtype %>%
arrange(desc(sum_quantity)) %>%
select('quarter_to_quarter', 'merged.qtype', 'sum_quantity') %>%
head(N)
quarter_new_qname %>%
arrange(desc(sum_quantity)) %>%
select('quarter_to_quarter', 'merged.qname', 'sum_quantity') %>%
head(N)
dns_data_fetched.sum_attacks_quarterly.sum_period = dns_data_fetched.sum_attacks_quarterly %>%
group_by(year_period) %>%
summarise(period_quantity = sum(quantity), qtype=qtype, quantity=quantity)
dns_data_fetched.sum_attacks_quarterly.sum_period['quantity_percentage'] = (dns_data_fetched.sum_attacks_quarterly.sum_period$quantity * 100) / dns_data_fetched.sum_attacks_quarterly.sum_period$period_quantity
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot( aes(x=reorder(qtype, -quantity_percentage), y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", position="dodge") +
scale_fill_viridis(discrete=TRUE, name="") +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), vjust = +0.25, ) +
facet_grid(~year_period) +
ylab("Percentage of attacks") +
ggtitle("All QTYPES - ungrouped bar")
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot( aes(x=year_period, y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", width = 0.5) +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), position = position_stack(vjust = 0.1)) +
scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("All QTYPES - stacked bars")
## Filter data using qtype quantity percentage bigger than 1
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
filter(quantity_percentage > 1) %>%
mutate(year_period=as.factor(year_period)) %>%
ggplot( aes(x=reorder(qtype, -quantity_percentage), y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", position="dodge") +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), vjust = -0.25) +
facet_grid(~year_period) +
scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("QTYPES > 1% by period - ungrouped bars")
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
filter(quantity_percentage > 1) %>%
mutate(year_period=as.factor(year_period)) %>%
ggplot( aes(x=year_period, y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", width = 0.5) +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), position = position_stack(vjust = 0.1)) +
scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("QTYPES > 1% by period - stacked bars")
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
ggplot( aes(x=year_period, y=period_quantity)) +
geom_bar(stat="identity", width = 0.5) +
scale_fill_viridis(discrete=TRUE, name="") +
ylab("Quantity of attacks") +
ggtitle("Attacks by period")
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
head(N)
dns_data_fetched.sum_attacks_quarterly.sum_period %>%
mutate(year_period=as.factor(year_period)) %>%
filter(quantity_percentage > 0.1) %>%
ggplot( aes(x=year_period, y=quantity_percentage, fill=qtype)) +
geom_bar(stat="identity", width = 0.5) +
geom_text(aes(label = paste(round(quantity_percentage, 2), "%")), position = position_stack(vjust = 0.1)) +
scale_fill_viridis(discrete=TRUE, name="") +
ylab("Percentage of attacks") +
ggtitle("All QTYPES - stacked bars")
## Analises
- Obs.: Tenha em mente que os dados referentes ao terceiro trimestre de 2021 podem não refletir a realidade, devido a alguns problemas de armazenamento durante esse período
- Para realizar a análise, foi realizado uma query agrupando os registros do DNS por (year_period, year, period, qname, qtype) e somado a quantidade de ataques por requisições e chamado de (quantity)
- Dessa forma, foi analisado a porcentagem de cada QTYPE dentre as consultas por trimestre de DNS já processados, em que a porcentagem foi definida pela soma de requisições por ataques de um mesmo tipo, então por exemplo se em um mesmo trimestre a soma de todas as requisições dos ataques com o QTYPE MX for 20 e somadas todas as requisições dos ataques do tipo ANY for 80, a porcentagem de ANY será 80% e de MX será 20%
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
head(200)
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
head(150)
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap))
data %>%
arrange(desc(n)) %>%
head(N)
data
data %>%
count(query_id) %>%
arrange(desc(n)) %>%
head(N)
data %>%
count(query_id) %>%
arrange(desc(n)) %>%
head(N)
data %>%
count(query_id) %>%
arrange(desc(n)) %>%
head(5)
data
data %>%
summarise(requests_per_attack) %>%
count(query_id) %>%
arrange(desc(n)) %>%
head(5)
data %>%
summarise(requests_per_attack = sum(requests_per_attack)) %>%
count(query_id) %>%
arrange(desc(n)) %>%
head(5)
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack)) %>%
#count(query_id) %>%
arrange(desc(n)) %>%
head(5)
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack))
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack), n = n())
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack), n = n()) %>%
#count(query_id) %>%
arrange(desc(n)) %>%
head(5)
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack), n = n(), qnames_diff = distinct(qname)) %>%
arrange(desc(n)) %>%
head(5)
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack), n = n(), qnames_diff = n_distinct(qname)) %>%
arrange(desc(n)) %>%
head(5)
data
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
head(10)
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
head(5)
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
head(5)
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
select('query_id', 'qtype', 'qname', 'requests_per_attack', 'ip', 'amount_overlap')
head(5)
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
select('query_id', 'qtype', 'qname', 'requests_per_attack', 'ip', 'amount_overlap') %>%
head(5)
dns_data_overlap_fetched
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
select('query_id', 'qtype', 'qname', 'requests_per_attack', 'ip', 'amount_overlap', 'tempo_inicio_datetime') %>%
head(5)
dns_data_overlap_fetched
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
select('query_id', 'qtype', 'qname', 'requests_per_attack', 'ip', 'amount_overlap', 'tempo_inicio_datetime', 'tempo_final_datetime') %>%
head(5)
data %>%
group_by(query_id) %>%
summarise(requests_per_attack = sum(requests_per_attack), n = n(), qnames_diff = n_distinct(qname)) %>%
arrange(desc(n)) %>%
head(5)
- Além disso, o grande número de ataques utilizando o mesmo query_id e também a quantidade de sobreposição entre os ataques indicam que muitos deles utilizaram a mesma ferramenta para realizar os ataques.
dns_data_overlap_fetched %>%
arrange(desc(amount_overlap)) %>%
select('query_id', 'qtype', 'qname', 'requests_per_attack', 'ip', 'amount_overlap') %>%
head(5)
